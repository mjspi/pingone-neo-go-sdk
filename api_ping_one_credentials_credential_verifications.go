/*
PingOne Platform API - Credentials

The PingOne Platform API covering the PingOne Credentials service

API version: 2023-03-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PingOneCredentialsCredentialVerificationsApiService PingOneCredentialsCredentialVerificationsApi service
type PingOneCredentialsCredentialVerificationsApiService service

type ApiCreateCredentialVerificationPresentationSessionNativeRequest struct {
	ctx context.Context
	ApiService *PingOneCredentialsCredentialVerificationsApiService
	environmentID string
	body *map[string]interface{}
}

func (r ApiCreateCredentialVerificationPresentationSessionNativeRequest) Body(body map[string]interface{}) ApiCreateCredentialVerificationPresentationSessionNativeRequest {
	r.body = &body
	return r
}

func (r ApiCreateCredentialVerificationPresentationSessionNativeRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateCredentialVerificationPresentationSessionNativeExecute(r)
}

/*
CreateCredentialVerificationPresentationSessionNative Create Credential Verification Presentation Session (NATIVE)

This PingOne collection contains only the REST API request examples without documentation. For complete documentation, go to <a href="https://apidocs.pingidentity.com/pingone/platform/v1/api/">apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @return ApiCreateCredentialVerificationPresentationSessionNativeRequest
*/
func (a *PingOneCredentialsCredentialVerificationsApiService) CreateCredentialVerificationPresentationSessionNative(ctx context.Context, environmentID string) ApiCreateCredentialVerificationPresentationSessionNativeRequest {
	return ApiCreateCredentialVerificationPresentationSessionNativeRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
	}
}

// Execute executes the request
func (a *PingOneCredentialsCredentialVerificationsApiService) CreateCredentialVerificationPresentationSessionNativeExecute(r ApiCreateCredentialVerificationPresentationSessionNativeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PingOneCredentialsCredentialVerificationsApiService.CreateCredentialVerificationPresentationSessionNative")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/environments/{environmentID}/presentationSessions"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterValueToString(r.environmentID, "environmentID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReadCredentialVerificationCredentialDataRequest struct {
	ctx context.Context
	ApiService *PingOneCredentialsCredentialVerificationsApiService
	environmentID string
	credentialsVerificationID string
}

func (r ApiReadCredentialVerificationCredentialDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReadCredentialVerificationCredentialDataExecute(r)
}

/*
ReadCredentialVerificationCredentialData Read Credential Verification Credential Data

This PingOne collection contains only the REST API request examples without documentation. For complete documentation, go to <a href="https://apidocs.pingidentity.com/pingone/platform/v1/api/">apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param credentialsVerificationID
 @return ApiReadCredentialVerificationCredentialDataRequest
*/
func (a *PingOneCredentialsCredentialVerificationsApiService) ReadCredentialVerificationCredentialData(ctx context.Context, environmentID string, credentialsVerificationID string) ApiReadCredentialVerificationCredentialDataRequest {
	return ApiReadCredentialVerificationCredentialDataRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		credentialsVerificationID: credentialsVerificationID,
	}
}

// Execute executes the request
func (a *PingOneCredentialsCredentialVerificationsApiService) ReadCredentialVerificationCredentialDataExecute(r ApiReadCredentialVerificationCredentialDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PingOneCredentialsCredentialVerificationsApiService.ReadCredentialVerificationCredentialData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/environments/{environmentID}/presentationSessions/{credentialsVerificationID}/credentialData"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterValueToString(r.environmentID, "environmentID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"credentialsVerificationID"+"}", url.PathEscape(parameterValueToString(r.credentialsVerificationID, "credentialsVerificationID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReadOneCredentialVerificationStatusRequest struct {
	ctx context.Context
	ApiService *PingOneCredentialsCredentialVerificationsApiService
	environmentID string
	credentialsVerificationID string
}

func (r ApiReadOneCredentialVerificationStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReadOneCredentialVerificationStatusExecute(r)
}

/*
ReadOneCredentialVerificationStatus Read One Credential Verification Status

This PingOne collection contains only the REST API request examples without documentation. For complete documentation, go to <a href="https://apidocs.pingidentity.com/pingone/platform/v1/api/">apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param credentialsVerificationID
 @return ApiReadOneCredentialVerificationStatusRequest
*/
func (a *PingOneCredentialsCredentialVerificationsApiService) ReadOneCredentialVerificationStatus(ctx context.Context, environmentID string, credentialsVerificationID string) ApiReadOneCredentialVerificationStatusRequest {
	return ApiReadOneCredentialVerificationStatusRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		credentialsVerificationID: credentialsVerificationID,
	}
}

// Execute executes the request
func (a *PingOneCredentialsCredentialVerificationsApiService) ReadOneCredentialVerificationStatusExecute(r ApiReadOneCredentialVerificationStatusRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PingOneCredentialsCredentialVerificationsApiService.ReadOneCredentialVerificationStatus")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/environments/{environmentID}/presentationSessions/{credentialsVerificationID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterValueToString(r.environmentID, "environmentID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"credentialsVerificationID"+"}", url.PathEscape(parameterValueToString(r.credentialsVerificationID, "credentialsVerificationID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
